package com.mystudy.jdbc_crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class StudentCRUD {
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	StudentCRUD() {

		try {
			Class.forName("oracle.jdbc.OracleDriver");
		} catch (ClassNotFoundException e) {
			System.out.println(">> 드라이버 로딩실패");
			e.printStackTrace();
		}
		
		
	}
	//Student 테이블에 있는 1개의 데이터 조회해서 화면 표시
	//ID값을 전달하면 데이터 가져와서 화면에 표시
	public boolean dispData(String id) {
		boolean cut = true;
		try {
			
			//데이터 베이스 연결작업
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			//3 Statement 문 실행(SQL문 실행)
			String sql = "";
			sql += "SELECT ID, NAME, KOR, ENG, MATH, TOT, AVG";
			sql += " FROM STUDENT ";
			sql += " WHERE ID = ? ";
			//3-1 PreparedStatment 객체 생성
			pstmt = conn.prepareStatement(sql);
			
			//3-2 ? (바인드 변수)에 값을 설정
			pstmt.setString(1, id);
			
			//3-3 SQL실행
			rs = pstmt.executeQuery();
			
			//4.SQL 실행결과에 대한 처리
			//SELECT : 조회
			if(rs.next()) {
				String str = "";
				str += rs.getString(1) + "\t";
				str += rs.getString(2) + "\t";
				str += rs.getInt(3) + "\t";
				str += rs.getInt(4) + "\t";
				str += rs.getInt(5) + "\t";
				str += rs.getInt(6) + "\t";
				str += rs.getDouble(7);
				System.out.println(str);
			}else {
				System.out.println(id + " - 데이터 없음");
				cut = false;
			}
			
		} catch (SQLException e) {
			System.out.println(">>데이터 베이스 접속실패");
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return cut;
	}
	public StudentVO selectId(String id) {
		StudentVO stu = null;
		//(할일) DB연결하고 SQL문을 실행해서 결과값이 있으면 STU변수에 저장한다.
		//데이터 베이스 연결작업
		try {
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			//3 Statement 문 실행(SQL문 실행)
			String sql = "";
			sql += "SELECT ID, NAME, KOR, ENG, MATH, TOT, AVG";
			sql += " FROM STUDENT ";
			sql += " WHERE ID = ? ";
			//3-1 PreparedStatment 객체 생성
			pstmt = conn.prepareStatement(sql);
			
			//3-2 ? (바인드 변수)에 값을 설정
			pstmt.setString(1, id);
			
			//3-3 SQL실행
			rs = pstmt.executeQuery();
			//4. SQL 실행결과에 대한 처리
			if(rs.next()) {//데이터가 있으면
				//StudentVO 타입의 stu 변수에 조회 데이터 저장
				stu = new StudentVO(id, rs.getString("NAME")
						, rs.getInt("KOR"), rs.getInt("ENG"), rs.getInt("MATH")
						, rs.getInt("TOT"), rs.getDouble("AVG"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		return stu;
	}
	
	private void closeConnStmtRs(Connection conn,
			PreparedStatement pstmt,
			ResultSet rs) {
		//3 Statement 문 실행(SQL문 실행)
		try {
			rs.close();
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	//전체 데이터 조회해서 ArrayList에 담아서 리턴
	//하나의 데이터를 StudentVO에 담고, VO를 ArrayList에 담아서 리턴
	public ArrayList<StudentVO> selectAll(){
		ArrayList<StudentVO> list = new ArrayList<>();
		try {
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			//3 Statement 문 실행(SQL문 실행)
			String sql = "";
			sql += "SELECT ID, NAME, KOR, ENG, MATH, TOT, AVG";
			sql += " FROM STUDENT ";
			sql += " ORDER BY ID ";
			//3-1 PreparedStatment 객체 생성
			pstmt = conn.prepareStatement(sql);
			
			//3-2 SQL실행
			rs = pstmt.executeQuery();
			
			//4.SQL 실행결과에 대한 처리
			while (rs.next()) {
				//DB데이터 하나를 StudentVO에 저장 + 리스트에 추가
				StudentVO vo = new StudentVO(rs.getString("ID")
						, rs.getString("NAME"), rs.getInt("KOR")
						, rs.getInt("ENG"), rs.getInt("MATH")
						, rs.getInt("TOT"), rs.getDouble("AVG"));
				
				//리스트에 추가
				list.add(vo);
			}
			
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}finally {
			closeConnStmtRs(conn, pstmt, rs);
		}

		return list;
	}
	public int insertData(String id, String name,
			int kor, int eng, int math, int tot, double avg) {
		int cnt = 0;
		try {
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			String sql = "INSERT INTO student " + 
					" (ID, NAME, KOR, ENG, MATH, TOT, AVG) " + 
					" VALUES (?, ?, ?, ?, ?, ?, ?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			pstmt.setString(2, name);
			pstmt.setInt(3, kor);
			pstmt.setInt(4, eng);
			pstmt.setInt(5, math);
			pstmt.setInt(6, tot);
			pstmt.setDouble(7, avg);
			cnt = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			closeConnStmtRs(conn, pstmt);
		}
		return cnt;
	}
	public int insertData(StudentVO student) {
		int cnt = 0;
		int tot = student.getMath() + student.getEng() + student.getKor();
		double avg = tot/3;
		cnt = insertData(student.getId(), student.getName(),
				student.getKor(), student.getEng(), student.getMath(),
				tot, avg );
		return cnt;
	}
	
	
	public int deleteData(String id) {
		int cut = 0;
		try {
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			String sql = "";
			sql += "DELETE FROM STUDENT WHERE ID = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			cut = pstmt.executeUpdate();
			System.out.println("삭제되었습니다.");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			closeConnStmtRs(conn, pstmt);
		}
		return cut;
	}
	public int deleteData(StudentVO student) {
		int result = 0;
		result = deleteData(student.getId());
		return result;
	}
	
	private void closeConnStmtRs(Connection conn,
			PreparedStatement pstmt) {
		//3 Statement 문 실행(SQL문 실행)
		try {
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int updateDate(StudentVO student) {
		int cut = 0;
		try {
			conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
						"mystudy", "mystudypw");
			String sql = "";
			sql += "UPDATE STUDENT SET  NAME = ?, KOR = ?, ENG = ?, MATH = ?  WHERE ID = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, student.getName());
			pstmt.setInt(2, student.getKor());
			pstmt.setInt(3, student.getEng());
			pstmt.setInt(4, student.getMath());
			pstmt.setString(5, student.getId());
			
			cut = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return cut;
	}
	public void view() {
		String temp = null;
		Scanner scan = new Scanner(System.in);
		int cun = -1;
		System.out.println("0.전부보기1.보기2.저장3.삭제.4수정");
		while(true) {
			try {
				cun = scan.nextInt();
				if(cun <= 4 && cun >= 0)break;
				System.out.println("0~4사이의 수를 입력해주세요.");
			}catch(InputMismatchException e) {
				System.out.println("다시입력해주세요");
				scan = new Scanner(System.in);
				e.printStackTrace();
			}
		}
		scan.nextLine();
		switch(cun) {
		case 0:
			ArrayList<StudentVO> list = selectAll();
			for(StudentVO student : list) {
				System.out.println(student.toString());
//				dispData(student.getId());
			}
			break;
		case 1:
			System.out.println("입력요청ID >>");
			temp = scan.nextLine();
			dispData(temp);
			break;
		case 2:
			StudentVO std = new StudentVO(null, null, 0, 0, 0);
			System.out.println("아이디 입력");
			temp = scan.nextLine();
			if(dispData(temp)) {
				System.out.println("존재하는 아이디입니다.");
				break;
			}
			std.setId(temp);
			System.out.println("이름 입력");
			std.setName(scan.nextLine());
			scan.nextLine();
			System.out.println("국어>");
			std.setKor(scan.nextInt());
			System.out.println("영어>");
			std.setEng(scan.nextInt());
			System.out.println("수학>");
			std.setMath(scan.nextInt());
			System.out.println(std.toString());
			
			cun = insertData(std);
			System.out.println(cun + " 개 생성");
			break;
		case 3:
			System.out.println("입력요청ID >>");
			temp = scan.nextLine();
			deleteData(temp);
			break;
		}
		scan.close();
		
	}
	
}