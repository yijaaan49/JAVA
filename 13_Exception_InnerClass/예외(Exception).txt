에러 또는 오류의 종류
- 에러(error) : 프로그램적으로 처리할 수 없음(JVM에서 처리)
- 예외(Exception) : 프로그래머가 해결해야 하는 오류

예외(Exception)
- 예외의 최상위 클래스는 java.lang.Throwable
- RuntimeException : 실행시 발생하는 Exception
- 그외 Exception 들 : 컴파일 단계에서 확인가능한 Exception

예외처리란 무엇인가?
- 프로그램 실행시 발생할 수 있는 예외에 대한 처리 코드를 작성하는 것

예외처리를 왜 하는가?
- 프로그램 실행시 비정상적인 종료를 막고, 정상 실행상태를 유지하기 위한 행위

예외 처리시 사용하는 키워드 : try ~ catch, finally, throws, throw

예외 처리 방식(2가지)
- catch 해서 처리 : 예외 발생시 예외에 대한 처리를 직접하는 것(이곳에서)
- 예외 던지기(throws) : 예외 발생시 catch해서 처리하지 않고 던지는 것
   (호출한 곳에서 처리하도록 넘긴다 - 위임)

예외를 발생 : 인위적으로 예외를 발생시킴
- throw 예외명/예외타입; 

예외를 만들기
- Exception 클래스를 상속받아서 예외를 정의하고 만들 수 있음
=================================================

예외를 잡아서 처리하는 방식
- try ~ catch문 : try { } catch(예외타입 변수명) {  } 

- try ~ catch ~ finally 문
	try {
		명령문(들);
	} catch(예외타입 변수명) {
		예외처리할 명령문(들);
	} finally {
		무조건 실행할 명령문(들);
	}

- finally {} : 정상실행 또는 비정상실행(예외발새)시에도 무조건 실행되는 문장 작성
=================================
예외 2종류
RuntimeException 클래스 : 프로그래머의 실수로 발생하는 예외 - 예외처리 필수
  (ArithmeticException, ClassCastException, NullPointerException,
  IndexOutOfBoundsException 등...)
Exception 클래스들 : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외 - 선택적처리
  (IOException, ClassNotFoundException 등...)













